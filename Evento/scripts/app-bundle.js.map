{"version":3,"sources":["src/app.ts","src/environment.ts","src/home.ts","src/main.ts","src/components/validation-alert.ts","src/core/auth-service.ts","src/core/data-service.ts","src/core/date-format-value-converter.ts","src/core/identity-service.ts","src/core/routing-authorize-step.ts","src/admins/config/admins-routing.ts","src/admins/view-models/admin-event-form.ts","src/admins/view-models/admin-events.ts","src/events/config/events-routing.ts","src/events/models/create-event-model.ts","src/events/models/event-details-model.ts","src/events/models/event-model.ts","src/events/models/event-ticket-model.ts","src/events/models/update-event-model.ts","src/events/services/event-tickets-service.ts","src/events/services/events-service.ts","src/events/view-models/event-details.ts","src/users/config/users-routing.ts","src/users/models/user-auth-model.ts","src/users/models/user-identity-model.ts","src/users/models/user-login-model.ts","src/users/models/user-register-model.ts","src/users/services/users-service.ts","src/users/validators/login-view-validator.ts","src/users/validators/register-view-validator.ts","src/users/view-models/login.ts","src/users/view-models/register.ts"],"names":[],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {RouterConfiguration} from 'aurelia-router';\r\nimport {autoinject} from 'aurelia-dependency-injection';\r\nimport {UsersService} from './users/services/users-service';\r\nimport {IdentityService} from './core/identity-service';\r\nimport {UserIdentityModel} from './users/models/user-identity-model';\r\nimport {RoutingAuthorizeStep} from './core/routing-authorize-step';\r\n\r\n@autoinject()\r\nexport class App {\r\n\r\n  constructor(private usersService: UsersService, private identityService: IdentityService) {}\r\n  \r\n  async activate() { \r\n    let userIdentity = await this.usersService.getUserIdentity();  \r\n\r\n    if(!this.identityService.isUserLogged) {\r\n      this.identityService.setUserIdentity(userIdentity);\r\n    }\r\n  }\r\n\r\n  configureRouter(config: RouterConfiguration) {  \r\n    let authorizeStep = new RoutingAuthorizeStep(this.identityService.userIdentity);\r\n\r\n    config.title = 'Evento';\r\n    config.addAuthorizeStep(authorizeStep);\r\n    config.map([\r\n      {route: ['', 'home'], moduleId: './home' },\r\n      {route: 'users', moduleId: './users/config/users-routing' }, \r\n      {route: 'admins', moduleId: './admins/config/admins-routing', settings: { roles: ['admin']} },   \r\n      {route: 'events', moduleId: './events/config/events-routing'}  \r\n    ]);  \r\n  }\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {observable} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {EventsService} from './events/services/events-service';\r\nimport {EventModel} from './events/models/event-model';\r\nimport * as toastr from 'toastr';\r\n\r\n@autoinject()\r\nexport class HomeViewModel {\r\n\r\n    private events: EventModel[];\r\n\r\n    @observable\r\n    private searchText: string;\r\n\r\n    constructor(private eventsService: EventsService, private router: Router) {}\r\n\r\n    async activate() {\r\n        this.searchText = '';\r\n        await this.browseEvents();\r\n    }\r\n\r\n    async browseEvents() {\r\n        this.events = await this.eventsService.browse(this.searchText);\r\n        if(this.events.length === 0)\r\n            toastr.warning('No events found!');\r\n    }\r\n\r\n    redirectToEventDetails(eventId: string) {\r\n        this.router.navigate(`#/events/${eventId}`);\r\n    }\r\n\r\n    private async searchTextChanged(){\r\n        await this.browseEvents();\r\n    }\r\n}","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .plugin('aurelia-validation');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {ValidationController} from 'aurelia-validation';\r\n\r\nexport class ValidationAlertViewModel {\r\n\r\n    private validationController: ValidationController;\r\n\r\n    activate(validationController: ValidationController) {\r\n        this.validationController = validationController;\r\n    }\r\n}","export class AuthService {\r\n\r\n    private rememberMe: boolean = true;\r\n    private readonly storageKey = 'access_token';\r\n    private get storage() { return this.rememberMe? localStorage : sessionStorage };\r\n\r\n    constructor() {\r\n        this.setStorage();\r\n    }\r\n\r\n    setAccessToken(accessToken: string, rememberMe: boolean) : void {\r\n        this.rememberMe = rememberMe;\r\n        this.storage.setItem(this.storageKey, accessToken);\r\n    }\r\n\r\n    getAccessToken() : string {\r\n        return this.storage.getItem(this.storageKey);\r\n    }\r\n\r\n    clearAccessToken() : void {\r\n        this.storage.clear();\r\n    }\r\n\r\n    private setStorage() {\r\n        this.rememberMe = localStorage.getItem(this.storageKey) !== null;\r\n    }\r\n}","import {HttpClient, json} from 'aurelia-fetch-client';\r\nimport {AuthService} from './auth-service';\r\n\r\nexport abstract class DataService {\r\n\r\n    protected constructor(private httpClient: HttpClient, private authService: AuthService) {\r\n        this.configureHttpClient();\r\n    }\r\n\r\n    protected get<TResult>(endpoint: string, isProtected: boolean) : Promise<TResult> {\r\n        return this.createRequest('GET', endpoint, null, isProtected);\r\n    }\r\n\r\n    protected post<TResult>(endpoint: string, data: any, isProtected: boolean) : Promise<TResult> {\r\n        return this.createRequest('POST', endpoint, data, isProtected);\r\n    }\r\n\r\n    protected put<TResult>(endpoint: string, data: any, isProtected: boolean) : Promise<TResult> {\r\n        return this.createRequest('PUT', endpoint, data, isProtected);\r\n    }\r\n\r\n    protected delete<TResult>(endpoint: string, isProtected: boolean) : Promise<TResult> {\r\n        return this.createRequest('DELETE', endpoint, null, isProtected);\r\n    }\r\n\r\n    private createRequest<TResult>(method: string, endpoint: string, data: any, isProtected: boolean) : Promise<TResult> {\r\n        let requestInit : RequestInit = {\r\n            method: method\r\n        };\r\n\r\n        if(data !== null)\r\n            requestInit.body = json(data);\r\n\r\n        if(isProtected)\r\n            requestInit.headers = this.createAuthorizationHeader();\r\n\r\n        return this.httpClient.fetch(endpoint, requestInit).then<TResult>(response => response.json().catch(() => {}));\r\n    }\r\n\r\n    private configureHttpClient() {\r\n        this.httpClient.configure(config => {\r\n            config.withBaseUrl('http://localhost:5000/')\r\n        });\r\n    }\r\n\r\n    private createAuthorizationHeader() : any {\r\n        let accessToken = this.authService.getAccessToken();\r\n        return { 'Authorization': `Bearer ${accessToken}` };\r\n    }\r\n}","import * as moment from 'moment';\r\n\r\nexport class DateFormatValueConverter {\r\n    toView(value, format) {\r\n        return moment(value).format(format);\r\n    }\r\n}","import {UserIdentityModel} from '../users/models/user-identity-model';\r\n\r\nexport class IdentityService {\r\n\r\n    public get isUserLogged() { return this.identity? true : false};\r\n\r\n    get userIdentity(): UserIdentityModel {\r\n        return this.identity;\r\n    };\r\n\r\n    private identity: UserIdentityModel;    \r\n\r\n    setUserIdentity(userIdentity: UserIdentityModel) : void {\r\n        this.identity = userIdentity;\r\n    }\r\n}","import {NavigationInstruction, Next, Redirect} from 'aurelia-router';\r\nimport {UserIdentityModel} from '../users/models/user-identity-model';\r\n\r\nexport class RoutingAuthorizeStep {\r\n\r\n    private readonly userIdentity: UserIdentityModel\r\n\r\n    constructor(userIdentity: UserIdentityModel) {\r\n        this.userIdentity = userIdentity;\r\n    }\r\n\r\n    run(navigationInstruction: NavigationInstruction, next: Next) : Promise<any> {\r\n        let requiredRoles = navigationInstruction\r\n            .getAllInstructions()\r\n            .map(i => i.config.settings.roles)[0];\r\n        \r\n        let isUserInRole = requiredRoles? \r\n            requiredRoles.some(r => r === this.userIdentity.role) : true;\r\n\r\n        return isUserInRole? next() : next.cancel(new Redirect('users/login'));\r\n    }\r\n}","import {RouterConfiguration} from 'aurelia-router';\r\n\r\nexport class AdminsRouting {\r\n\r\n    configureRouter(config: RouterConfiguration) {\r\n        config.title = 'Admins';\r\n\r\n        config.map([\r\n            {route: 'events', moduleId: '../view-models/admin-events' },\r\n            {route: ['events/create', 'events/:id/update'] , moduleId: '../view-models/admin-event-form'}            \r\n        ]);\r\n    }\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {Router} from 'aurelia-router';\r\nimport {EventsService} from '../../events/services/events-service';\r\nimport {CreateEventModel} from '../../events/models/create-event-model';\r\nimport {UpdateEventModel} from '../../events/models/update-event-model';\r\nimport * as toastr from 'toastr';\r\n\r\n@autoinject()\r\nexport class AdminEventFormViewModel {\r\n\r\n    private eventToUpdateId: string;\r\n    private isCreateMode: boolean;\r\n    private model: CreateEventModel | UpdateEventModel;\r\n\r\n    constructor(private eventsService: EventsService, private router: Router) {}\r\n\r\n    async activate(params: any) {\r\n        this.eventToUpdateId = params.id;\r\n        this.isCreateMode = this.eventToUpdateId? false : true;\r\n        this.isCreateMode? this.setCreateMode() : await this.setEditMode();\r\n    }\r\n\r\n    async createEvent() {\r\n        await this.eventsService.create(<CreateEventModel> this.model);\r\n        this.redirectToAdminEvents();\r\n        toastr.success('Event created!');\r\n    }\r\n\r\n    async editEvent() {\r\n        await this.eventsService.update(this.eventToUpdateId, <UpdateEventModel> this.model);\r\n        this.redirectToAdminEvents();\r\n        toastr.success('Event edited!');\r\n    }\r\n\r\n    redirectToAdminEvents() {\r\n        this.router.navigate('#/admins/events');\r\n    }\r\n\r\n    private setCreateMode() {\r\n        this.model = new CreateEventModel();\r\n    }\r\n\r\n    private async setEditMode() {\r\n        let eventToUpdate = await this.eventsService.getEvent(this.eventToUpdateId);\r\n        \r\n        let updateModel: UpdateEventModel = {\r\n            name: eventToUpdate.name,\r\n            description: eventToUpdate.description\r\n        };\r\n\r\n        this.model = updateModel;\r\n    }\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {Router} from 'aurelia-router';\r\nimport {EventsService} from '../../events/services/events-service';\r\nimport {EventModel} from '../../events/models/event-model';\r\nimport * as toastr from 'toastr';\r\n\r\n@autoinject()\r\nexport class AdminEventsViewModel {\r\n\r\n    private events: EventModel[];\r\n\r\n    constructor(private eventsService: EventsService, private router: Router) {\r\n        this.events = [];    \r\n    }\r\n\r\n    async activate() {\r\n        await this.getAdminEvents();\r\n    }\r\n\r\n    async deleteEvent(eventId: string, index: number) {\r\n        let confirm = window.confirm('Do you want to remove this event?');\r\n        if(!confirm) return;\r\n        await this.eventsService.delete(eventId);\r\n        this.removeEventFromEvents(index);\r\n        toastr.success('Event deleted!');\r\n    }\r\n\r\n    redirectToAdminEventForm(eventId: string) {\r\n        let url = eventId? `#/admins/events/${eventId}/update` : '#/admins/events/create';\r\n        this.router.navigate(url);\r\n    }\r\n\r\n    private async getAdminEvents() {\r\n        this.events = await this.eventsService.browse('');\r\n    }    \r\n\r\n    private removeEventFromEvents(index: number) {\r\n        this.events.splice(index, 1);\r\n    }\r\n}","import {RouterConfiguration} from 'aurelia-router';\r\n\r\nexport class EventsRouting {\r\n    configureRouter(config: RouterConfiguration) {\r\n        config.title = 'Events';\r\n        config.map([\r\n            {route: ':id', moduleId: '../view-models/event-details'}\r\n        ]);\r\n    }\r\n}","import {UpdateEventModel} from './update-event-model';\r\n\r\nexport class CreateEventModel extends UpdateEventModel {\r\n    startDate: Date;\r\n    endDate: Date;\r\n    tickets: number;\r\n    price: number;\r\n}","import {EventModel} from './event-model';\r\nimport {EventTicketModel} from './event-ticket-model';\r\n\r\nexport class EventDetailsModel extends EventModel {\r\n    tickets: EventTicketModel[];\r\n}","export class EventModel {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    updatedAt: Date;\r\n    ticketsCount: number;\r\n    purchasedTicketsCount: number;\r\n    availableTicketsCount: number;\r\n}","export class EventTicketModel {\r\n    id: string;\r\n    seating: number;\r\n    price: number;\r\n    userId: string;\r\n    purchasedAt: Date;\r\n    purchased: boolean;\r\n}","export class UpdateEventModel {\r\n    name: string;\r\n    description: string;\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\nimport {AuthService} from '../../core/auth-service';\r\nimport {DataService} from '../../core/data-service';\r\n\r\n@autoinject()\r\nexport class EventTicketsService extends DataService {\r\n\r\n    constructor(httpClient: HttpClient, authService: AuthService) {\r\n        super(httpClient, authService);\r\n    }\r\n\r\n    purchase(eventId: string, amount: number) : Promise<any> {\r\n        let url = `events/${eventId}/tickets/purchase/${amount}`;\r\n        return super.post<any>(url, null, true);\r\n    }\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\nimport {AuthService} from '../../core/auth-service';\r\nimport {DataService} from '../../core/data-service';\r\nimport {EventModel} from '../models/event-model';\r\nimport {CreateEventModel} from '../models/create-event-model';\r\nimport {UpdateEventModel} from '../models/update-event-model';\r\nimport {EventDetailsModel} from '../models/event-details-model';\r\n\r\n@autoinject()\r\nexport class EventsService extends DataService{\r\n\r\n    constructor(httpClient: HttpClient, authService: AuthService) {\r\n        super(httpClient, authService);\r\n    }\r\n\r\n    browse(name: string) : Promise<EventModel[]> {\r\n        let url = `events?name=${name}`;\r\n        return super.get<EventModel[]>(url, false);\r\n    }  \r\n\r\n    getEvent(eventId: string) : Promise<EventDetailsModel> {\r\n        let url = `events/${eventId}`;\r\n        return super.get<EventDetailsModel>(url, true);\r\n    }\r\n\r\n    create(model: CreateEventModel) : Promise<any> {\r\n        let url = 'events';\r\n        return super.post<any>(url, model, true);\r\n    }\r\n\r\n    update(eventId: string, model: UpdateEventModel) : Promise<any> {\r\n        let url = `events/${eventId}`;\r\n        return super.put<any>(url, model, true);\r\n    } \r\n\r\n    delete(eventId: string) : Promise<any> {\r\n        let url = `events/${eventId}`;\r\n        return super.delete(url, true);\r\n    }\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {EventsService} from '../services/events-service';\r\nimport {EventTicketsService} from '../services/event-tickets-service';\r\nimport {EventDetailsModel} from '../models/event-details-model';\r\nimport * as toastr from 'toastr';\r\n\r\n@autoinject()\r\nexport class EventDetailsViewModel {\r\n\r\n    private eventId: string;\r\n    private event: EventDetailsModel;\r\n    private ticketsAmount: number;\r\n    private ticketsBanner: any;\r\n\r\n    get ticketsPrice() {\r\n        if(this.event.tickets.length === 0) return;\r\n        return this.event.tickets[0].price;\r\n    }\r\n\r\n    constructor(private eventsService: EventsService, \r\n        private eventTicketsService: EventTicketsService) {}\r\n\r\n    async activate(params: any) {\r\n        this.eventId = params.id;\r\n        await this.getEventDetails();\r\n    }\r\n\r\n    async purchaseTicket() {\r\n        let confirm = window.confirm('Do you want to buy tickets?')\r\n        if(!confirm) return;\r\n        await this.eventTicketsService.purchase(this.eventId, this.ticketsAmount);\r\n        this.event.availableTicketsCount -= this.ticketsAmount;\r\n        this.ticketsAmount = 0;\r\n        this.setTicketsBanner();\r\n        toastr.success('You bought tickets!');\r\n    }\r\n\r\n    private async getEventDetails() {\r\n        this.event = await this.eventsService.getEvent(this.eventId);\r\n        this.setTicketsBanner();\r\n    }\r\n\r\n    private setTicketsBanner() {\r\n        let availableTicketsPercentage = \r\n            Math.round((100 * this.event.availableTicketsCount) / this.event.ticketsCount);\r\n\r\n        if(availableTicketsPercentage > 50)\r\n            this.ticketsBanner = {class: 'alert alert-success'};\r\n        else if(availableTicketsPercentage > 25)\r\n            this.ticketsBanner = {class: 'alert alert-warning'};\r\n        else\r\n            this.ticketsBanner = {class: 'alert alert-danger'};\r\n\r\n        this.ticketsBanner.text = `This event has ${availableTicketsPercentage}% tickets available!`;\r\n    }\r\n}","import {RouterConfiguration} from 'aurelia-router';\r\n\r\nexport class UsersRouting {\r\n\r\n    configureRouter(config: RouterConfiguration) {\r\n        config.title = 'Users';\r\n        config.map([\r\n            {route: 'register', moduleId: '../view-models/register', nav: true, title: 'Register'},\r\n            {route: 'login', moduleId: '../view-models/login', nav: true, title: 'Login'}\r\n        ]);\r\n    }\r\n}","export class UserAuthModel {\r\n    token: string;\r\n    role: string;\r\n    expires: number;\r\n}","export class UserIdentityModel {\r\n    name: string;\r\n    email: string;\r\n    role: string;\r\n}","export class UserLoginModel {\r\n    email: string;\r\n    password: string;\r\n}","import {UserLoginModel} from './user-login-model';\r\n\r\nexport class UserRegisterModel extends UserLoginModel {   \r\n    name: string;\r\n    role: string;  \r\n    confirmPassword: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.role = 'admin';\r\n    }\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\nimport {DataService} from '../../core/data-service';\r\nimport {UserRegisterModel} from '../models/user-register-model';\r\nimport {UserLoginModel} from '../models/user-login-model';\r\nimport {UserIdentityModel} from '../models/user-identity-model';\r\nimport {UserAuthModel} from '../models/user-auth-model';\r\nimport {AuthService} from '../../core/auth-service';\r\n\r\n@autoinject()\r\nexport class UsersService extends DataService {\r\n\r\n    constructor(httpClient: HttpClient, authService: AuthService) {\r\n        super(httpClient, authService)\r\n    }\r\n\r\n    register(model: UserRegisterModel): Promise<any> {\r\n        let url = 'account/register';\r\n        return super.post<any>(url, model, false);\r\n    }\r\n\r\n    login(model: UserLoginModel) : Promise<UserAuthModel> {\r\n        let url = 'account/login';\r\n        return super.post<UserAuthModel>(url, model, false);\r\n    }\r\n\r\n    getUserIdentity() : Promise<UserIdentityModel> {\r\n        let url = 'account';\r\n        return super.get<UserIdentityModel>(url, true);\r\n    }\r\n}","import {UserLoginModel} from '../models/user-login-model';\r\nimport {ValidationRules} from 'aurelia-validation';\r\n\r\nexport class LoginViewValidator {\r\n    validate(model: UserLoginModel) : void {\r\n        ValidationRules \r\n            .ensure((model: UserLoginModel) => model.email)\r\n                .required().withMessage('Email is required')\r\n                .email().withMessage('Email is not correct')\r\n            .ensure((model: UserLoginModel) => model.password)\r\n                .required().withMessage('Password is required')\r\n            .on(model);\r\n    }\r\n}","import {UserRegisterModel} from '../models/user-register-model';\r\nimport {ValidationRules} from 'aurelia-validation';\r\n\r\nexport class RegisterViewValidator {\r\n    validate(model: UserRegisterModel) : void {\r\n        ValidationRules\r\n            .ensure((model: UserRegisterModel) => model.name)\r\n                .required().withMessage('Login is required')\r\n            .ensure((model: UserRegisterModel) => model.email)\r\n                .required().withMessage('Email is required')\r\n                .email().withMessage('Email is not correct')\r\n            .ensure((model: UserRegisterModel) => model.password)\r\n                .required().withMessage('Password is required')\r\n                .minLength(6).withMessage('Password must contain at least 6 characters')\r\n            .ensure((model: UserRegisterModel) => model.confirmPassword)\r\n                .required().withMessage('Possword confirmation is required')\r\n                .satisfies((value: string, model: UserRegisterModel) => value === model.password).withMessage('Password confirmation is not correct')\r\n            .on(model);\r\n    }\r\n}","import {UserLoginModel} from '../models/user-login-model';\r\nimport {LoginViewValidator} from '../validators/login-view-validator';\r\nimport {ValidationControllerFactory, ValidationController} from 'aurelia-validation';\r\nimport {autoinject} from 'aurelia-dependency-injection';\r\nimport {Router} from 'aurelia-router';\r\nimport {UsersService} from '../services/users-service';\r\nimport {AuthService} from '../../core/auth-service';\r\nimport {IdentityService} from '../../core/identity-service';\r\nimport * as toastr from 'toastr';\r\n\r\n@autoinject()\r\nexport class UsersLoginViewModel {\r\n\r\n    private validationController: ValidationController;\r\n    private model: UserLoginModel;\r\n    private rememberMe: boolean;\r\n\r\n    constructor(private usersService: UsersService, private authService : AuthService,\r\n        private identityService: IdentityService, private router: Router, validator: LoginViewValidator, validationControllerFactory: ValidationControllerFactory) {\r\n        this.model = new UserLoginModel();\r\n        this.rememberMe = true;\r\n        this.validationController = validationControllerFactory.createForCurrentScope();\r\n        validator.validate(this.model);\r\n    }\r\n\r\n    async login() {\r\n        let userAuthModel = await this.usersService.login(this.model);\r\n        this.authService.setAccessToken(userAuthModel.token, this.rememberMe);\r\n        let userIdentity = await this.usersService.getUserIdentity();\r\n        this.identityService.setUserIdentity(userIdentity);\r\n        this.router.navigate('#/');\r\n        toastr.success(`Hello ${userIdentity.name}!`);\r\n    }\r\n}","import {autoinject} from 'aurelia-dependency-injection';\r\nimport {UsersService} from '../services/users-service';\r\nimport {UserRegisterModel} from '../models/user-register-model';\r\nimport {HttpClient} from 'aurelia-fetch-client';\r\nimport {RegisterViewValidator} from '../validators/register-view-validator';\r\nimport {ValidationControllerFactory, ValidationController} from 'aurelia-validation';\r\nimport * as toastr from 'toastr';\r\n\r\n@autoinject()\r\nexport class UsersRegisterViewModel {\r\n\r\n    private validationController: ValidationController;\r\n    private model: UserRegisterModel;\r\n\r\n\r\n    constructor(private usersService: UsersService, validator: RegisterViewValidator,\r\n        validationControllerFactory: ValidationControllerFactory) {\r\n        this.model = new UserRegisterModel();      \r\n        this.validationController = validationControllerFactory.createForCurrentScope(); \r\n        validator.validate(this.model);     \r\n    }\r\n\r\n    async register() {\r\n        await this.usersService.register(this.model);\r\n        toastr.success('Registraion succeed');\r\n    }    \r\n}"],"sourceRoot":".."}